import WalletConnect from "@walletconnect/client";
import QRCodeModal from "@walletconnect/qrcode-modal";
import { convertUtf8ToHex } from "@walletconnect/utils";
//import Web3 from "web3";


export const connectWithWalletConnect = (successCallback, errorCallback) => {
  // Create a connector
  const connector = new WalletConnect({
    bridge: "https://bridge.walletconnect.org", // Required
    qrcodeModal: QRCodeModal,
  });

  // Check if connection is already established
  if (!connector.connected) {
    // create new session
    connector.createSession();
  }


  if (connector.connected) {
    console.log("connected already");
    //connector.killSession();
    //successCallback(connector._peerMeta.name, connector._accounts[0]);

    console.log(connector);
    if (connector._accounts.length > 0) {
      signMessage(connector, connector._accounts[0], "Please sign this message", successCallback, errorCallback);
      
      //successCallback(connector._peerMeta.name, connector._accounts[0]);
      /*const web3 = new Web3(window.ethereum);

      const bytecode = await web3.eth.getCode(connector._accounts[0]);
      console.log(bytecode);
      console.log(hexStripZeros);*/
      //const isSmartContract = bytecode && hexStripZeros(bytecode) !== "0x";
      //console.log(`Smart contract = ${isSmartContract}`);
    }
  }


  // Subscribe to connection events
  connector.on("connect", async (error, payload) => {
    if (error) {
      console.log(error);
      errorCallback(error.message);
    } else {
      console.log("Connected with wallet connect!");
    
      // Get provided accounts and chainId
      const { accounts, chainId } = payload.params[0];
      console.log(accounts, chainId);
  
      if (accounts.length > 0) {
        signMessage(connector, accounts[0], "Please sign this message", successCallback, errorCallback);
        //console.log(result);
        //successCallback(connector._peerMeta.name, accounts[0]);
        /*const web3 = new Web3(window.ethereum);
  
        const bytecode = await web3.eth.getCode(accounts[0]);
      
        const isSmartContract = bytecode && hexStripZeros(bytecode) !== "0x";
        console.log(`Smart contract = ${isSmartContract}`);*/
        
      }
    }


  });

  connector.on("session_update", (error, payload) => {
    if (error) {
      throw error;
    }
    console.log("session updated");
    // Get updated accounts and chainId
    const { accounts, chainId } = payload.params[0];
  });

  connector.on("disconnect", (error, payload) => {
    if (error) {
      throw error;
    }
    console.log("wallet connect disconnected");
    // Delete connector
  });

  return connector;
}

export const disconnect = (connector) => {
  connector.killSession();
}

export const signMessage = async (connector, address, message, successCallback, errorCallback) => {

  const msgParams = [
    address,                            
    message,
  ];

  // Sign message
  connector
    .signMessage(msgParams)
    .then((result) => {
      // Returns signature.
      console.log(result);
      successCallback(result);
    })
    .catch(error => {
      // Error returned when rejected
      console.error(error);
      errorCallback(error);
    });
  /*
  connector
    .signPersonalMessage(msgParams)
    .then((result) => {
      // Returns signature.
      console.log(result)
    })
    .catch(error => {
      // Error returned when rejected
      console.error(error);
    })*/
}
